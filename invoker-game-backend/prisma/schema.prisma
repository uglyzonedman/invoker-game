// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @map("updated_at")
  login        String         @unique
  password     String
  avatarPath   String?        @default("not_photo.webp")
  UserKeyboard UserKeyboard[]
  ResultGame   ResultGame[]
  HistoryGame  HistoryGame[]

  @@map("user")
}

model UserKeyboard {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  key       String   @default("")
  skill     String   @default("")
  photo     String   @default("")
  textColor String   @map("text_color")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_keyboard")
}

model ResultGame {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  gameMode  game_mode @default(easy) @map("game_mode")
  result    String
  userId    Int       @map("user_id")
  user      User      @relation(fields: [userId], references: [id])

  @@map("result_game")
}

model HistoryGame {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  result    Float?

  @@map("history_game")
}

enum game_mode {
  easy
  medium
  hard
}
